#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
require "yaml"
require "json"
require "set"

class GitHubActionsUpdater
  DEFAULT_WORKFLOW_DIR = ".github/workflows"

  attr_reader :dry_run, :verbose, :workflow_files, :target_actions, :migrate

  def initialize(options = {})
    @dry_run = options[:dry_run]
    @verbose = options[:verbose]
    @migrate = options[:migrate]
    @workflow_files = options[:workflow_files] || []
    @target_actions = options[:target_actions] || []
    @latest_versions_cache = {}

    # Check if gh command is available
    unless system("which gh > /dev/null 2>&1")
      puts "Error: GitHub CLI (gh) is not installed or not in PATH"
      exit 1
    end

    # If no workflow files specified, use all files in the default directory
    if @workflow_files.empty?
      @workflow_files = find_all_workflow_files
    end
  end

  def run_gh_command(args)
    command = "gh #{args.join(' ')}"
    puts "Running: #{command}" if @verbose
    
    result = `#{command} 2>&1`
    exit_status = $?.exitstatus
    
    if exit_status != 0
      puts "Error running gh command: #{command}" if @verbose
      puts "Error output: #{result}" if @verbose
      return nil
    end
    
    result.strip
  end

  def run_gh_api(endpoint, params = {})
    args = ["api", endpoint]
    
    # Add query parameters
    params.each do |key, value|
      args << "--field" << "#{key}=#{value}"
    end
    
    result = run_gh_command(args)
    return nil unless result
    
    begin
      JSON.parse(result)
    rescue JSON::ParserError => e
      puts "Error parsing JSON response: #{e.message}" if @verbose
      nil
    end
  end

  def run
    if @workflow_files.empty?
      puts "No workflow files found in #{DEFAULT_WORKFLOW_DIR} directory."
      exit 1
    end

    # Validate all specified files exist
    validate_workflow_files

    if @migrate
      migrate_tag_to_hash_versions
    else
      update_hash_based_actions
    end
  end

  def update_hash_based_actions
    puts "Checking GitHub Actions in #{@workflow_files.size} workflow file(s)..."

    # Find all actions with hash-based versions in specified workflow files
    hash_based_actions = find_hash_based_actions

    if hash_based_actions.empty?
      puts "No GitHub Actions with hash-based versions found in specified workflow files."
      return
    end

    puts "Found #{hash_based_actions.size} GitHub Actions with hash-based versions:"
    hash_based_actions.each do |action, versions|
      plural = (versions.size > 1) ? "versions" : "version"
      puts "  - #{action} (#{versions.size} hash-based #{plural})"
    end

    # Fetch latest versions for all identified actions
    puts "\nFetching latest versions for these actions..."
    action_repos = hash_based_actions.keys

    action_repos.each do |action|
      latest_version = fetch_latest_version(action)
      if latest_version
        @latest_versions_cache[action] = latest_version
        puts "Latest version of #{action}: #{latest_version}"
      else
        puts "Warning: Could not determine the latest version of #{action}"
      end
    end

    # Update the workflow files
    update_workflow_files(hash_based_actions)
  end

  def migrate_tag_to_hash_versions
    puts "Converting tag-based versions to hash-based versions in #{@workflow_files.size} workflow file(s)..."

    # Find all actions with tag-based versions in specified workflow files
    tag_based_actions = find_tag_based_actions

    if tag_based_actions.empty?
      puts "No GitHub Actions with tag-based versions found in specified workflow files."
      return
    end

    puts "Found #{tag_based_actions.size} GitHub Actions with tag-based versions:"
    tag_based_actions.each do |action, versions|
      plural = (versions.size > 1) ? "versions" : "version"
      puts "  - #{action} (#{versions.size} tag-based #{plural})"
    end

    # Fetch hash versions for all identified actions
    puts "\nFetching hash versions for these actions..."
    action_repos = tag_based_actions.keys

    action_repos.each do |action|
      tag_based_actions[action].each do |tag_version|
        hash_version = fetch_hash_for_tag(action, tag_version)
        if hash_version
          cache_key = "#{action}@#{tag_version}"
          @latest_versions_cache[cache_key] = hash_version
          puts "Hash version of #{action}@#{tag_version}: #{hash_version}"
        else
          puts "Warning: Could not determine the hash version of #{action}@#{tag_version}"
        end
      end
    end

    # Update the workflow files
    migrate_workflow_files(tag_based_actions)
  end

  def find_all_workflow_files
    workflow_dir = File.join(Dir.pwd, DEFAULT_WORKFLOW_DIR)
    unless Dir.exist?(workflow_dir)
      puts "Workflow directory not found at #{workflow_dir}"
      return []
    end

    Dir.glob(File.join(workflow_dir, "*.{yml,yaml}")).sort
  end

  def validate_workflow_files
    invalid_files = @workflow_files.reject { |file| File.exist?(file) }
    if invalid_files.any?
      puts "Error: The following workflow files do not exist:"
      invalid_files.each { |file| puts "  - #{file}" }
      exit 1
    end
  end

  def find_hash_based_actions
    hash_based_actions = {}
    sha_pattern = /^[0-9a-f]{40}$/

    @workflow_files.each do |file|
      content = File.read(file)

      # Find all 'uses: action@hash' patterns
      content.scan(/uses:\s+([^@\s]+)@([^\s#]+)(?:\s+#\s+(.+))?/) do |match|
        action = match[0]
        version = match[1]
        comment = match[2]

        # Skip if target actions are specified and this action is not included
        next if @target_actions.any? && !@target_actions.include?(action)

        # Check if it's a SHA hash (40 hex characters)
        if version&.match?(sha_pattern)
          hash_based_actions[action] ||= Set.new
          hash_based_actions[action] << "#{version}#{comment ? " # #{comment}" : ""}"
        end
      end
    rescue => e
      puts "Error processing #{file}: #{e.message}" if @verbose
    end

    # Convert the Sets to Arrays
    hash_based_actions.transform_values(&:to_a)
  end

  def find_tag_based_actions
    tag_based_actions = {}
    sha_pattern = /^[0-9a-f]{40}$/

    @workflow_files.each do |file|
      content = File.read(file)

      # Find all 'uses: action@tag' patterns (not SHA hashes)
      content.scan(/uses:\s+([^@\s]+)@([^\s#]+)(?:\s+#\s+(.+))?/) do |match|
        action = match[0]
        version = match[1]
        comment = match[2]

        # Skip if target actions are specified and this action is not included
        next if @target_actions.any? && !@target_actions.include?(action)

        # Check if it's NOT a SHA hash (i.e., it's a tag)
        unless version&.match?(sha_pattern)
          tag_based_actions[action] ||= Set.new
          tag_based_actions[action] << version
        end
      end
    rescue => e
      puts "Error processing #{file}: #{e.message}" if @verbose
    end

    # Convert the Sets to Arrays
    tag_based_actions.transform_values(&:to_a)
  end

  def fetch_latest_version(action_repo)
    return @latest_versions_cache[action_repo] if @latest_versions_cache.key?(action_repo)

    puts "Fetching the latest version of #{action_repo}..." if @verbose

    # Get latest release
    latest_release = run_gh_api("repos/#{action_repo}/releases/latest")
    return nil unless latest_release

    latest_tag = latest_release["tag_name"]
    return nil unless latest_tag

    # Get the reference for this tag to find its SHA
    tag_ref = run_gh_api("repos/#{action_repo}/git/ref/tags/#{latest_tag}")
    if tag_ref && tag_ref["object"] && tag_ref["object"]["sha"]
      latest_sha = tag_ref["object"]["sha"]
      return "#{latest_sha} # #{latest_tag}"
    end

    # If we couldn't get the SHA, just return the tag
    latest_tag
  rescue => e
    puts "Error fetching latest version for #{action_repo}: #{e.message}" if @verbose
    nil
  end

  def fetch_hash_for_tag(action_repo, tag)
    puts "Fetching the hash version for #{action_repo}@#{tag}..." if @verbose

    # Check if it's a major version tag (like v1, v2, etc.)
    if tag.match?(/^v\d+$/)
      return fetch_latest_in_major_version(action_repo, tag)
    end

    # Get the reference for this tag to find its SHA
    tag_ref = run_gh_api("repos/#{action_repo}/git/ref/tags/#{tag}")
    if tag_ref && tag_ref["object"] && tag_ref["object"]["sha"]
      latest_sha = tag_ref["object"]["sha"]
      return "#{latest_sha} # #{tag}"
    end

    # If tag reference doesn't work, try getting the commit directly
    commits = run_gh_api("repos/#{action_repo}/commits/#{tag}")
    if commits && commits["sha"]
      return "#{commits["sha"]} # #{tag}"
    end

    nil
  rescue => e
    puts "Error fetching hash version for #{action_repo}@#{tag}: #{e.message}" if @verbose
    nil
  end

  def fetch_latest_in_major_version(action_repo, major_version_tag)
    major_version = major_version_tag.match(/^v(\d+)$/)[1].to_i
    puts "Finding latest release in #{major_version_tag}.x series for #{action_repo}..." if @verbose

    # Get all releases for the repository
    releases = run_gh_api("repos/#{action_repo}/releases")
    return nil unless releases&.is_a?(Array)
    
    # Filter releases that match the major version pattern (v1.x.y)
    matching_releases = releases.select do |release|
      release["tag_name"]&.match?(/^v#{major_version}\.\d+\.\d+$/)
    end

    if matching_releases.empty?
      puts "No releases found matching #{major_version_tag}.x.y pattern" if @verbose
      return nil
    end

    # Sort by version and get the latest
    latest_release = matching_releases.max_by do |release|
      version_parts = release["tag_name"]&.match(/^v(\d+)\.(\d+)\.(\d+)$/)
      next [0, 0, 0] unless version_parts
      [version_parts[1].to_i, version_parts[2].to_i, version_parts[3].to_i]
    end

    latest_tag = latest_release["tag_name"]
    puts "Found latest release in #{major_version_tag}.x series: #{latest_tag}" if @verbose

    # Get the SHA for this tag
    tag_ref = run_gh_api("repos/#{action_repo}/git/ref/tags/#{latest_tag}")
    if tag_ref && tag_ref["object"] && tag_ref["object"]["sha"]
      latest_sha = tag_ref["object"]["sha"]
      return "#{latest_sha} # #{latest_tag}"
    end

    # Fallback: return just the tag if we can't get SHA
    latest_tag
  rescue => e
    puts "Error fetching latest release in #{major_version_tag}.x series for #{action_repo}: #{e.message}" if @verbose
    nil
  end

  def update_workflow_files(hash_based_actions)
    files_changed = 0
    actions_updated = Hash.new(0)

    @workflow_files.each do |file|
      content = File.read(file)
      file_modified = false

      hash_based_actions.each do |action, versions|
        versions.each do |old_version|
          # Skip if we don't have a latest version for this action
          next unless @latest_versions_cache.key?(action)

          # Match the full 'uses: action@oldversion' pattern
          old_pattern = "uses: #{action}@#{old_version}"
          new_version = @latest_versions_cache[action]
          new_pattern = "uses: #{action}@#{new_version}"

          # Replace old version with new version
          if content.include?(old_pattern)
            content = content.gsub(old_pattern, new_pattern)
            actions_updated[action] += 1
            file_modified = true
          end
        end
      end

      if file_modified
        if dry_run
          puts "Would update: #{file}"
        else
          File.write(file, content)
          puts "Updated: #{file}"
          files_changed += 1
        end
      else
        puts "No updates needed for: #{file}"
      end
    end

    if files_changed > 0
      puts "\nSuccessfully updated #{files_changed} workflow file(s)"

      actions_updated.each do |action, count|
        puts "  - #{action}: #{count} occurrence(s)"
      end
    else
      puts "\nNo files were updated" + (dry_run ? " (dry run)" : "")
    end
  end

  def migrate_workflow_files(tag_based_actions)
    files_changed = 0
    actions_migrated = Hash.new(0)

    @workflow_files.each do |file|
      content = File.read(file)
      file_modified = false

      tag_based_actions.each do |action, versions|
        versions.each do |tag_version|
          cache_key = "#{action}@#{tag_version}"
          # Skip if we don't have a hash version for this action@tag
          next unless @latest_versions_cache.key?(cache_key)

          # Match the full 'uses: action@tag' pattern
          old_pattern = "uses: #{action}@#{tag_version}"
          new_version = @latest_versions_cache[cache_key]
          new_pattern = "uses: #{action}@#{new_version}"

          # Replace old version with new version
          if content.include?(old_pattern)
            content = content.gsub(old_pattern, new_pattern)
            actions_migrated[action] += 1
            file_modified = true
          end
        end
      end

      if file_modified
        if dry_run
          puts "Would migrate: #{file}"
        else
          File.write(file, content)
          puts "Migrated: #{file}"
          files_changed += 1
        end
      else
        puts "No migrations needed for: #{file}"
      end
    end

    if files_changed > 0
      puts "\nSuccessfully migrated #{files_changed} workflow file(s)"

      actions_migrated.each do |action, count|
        puts "  - #{action}: #{count} occurrence(s)"
      end
    else
      puts "\nNo files were migrated" + (dry_run ? " (dry run)" : "")
    end
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: gh actions-updater [options] [-f workflow_file ...] [-a action ...]"

  opts.on("-f", "--file FILE", "Specify workflow file(s) to update (can be used multiple times, relative or absolute path)") do |file|
    options[:workflow_files] ||= []
    # Convert to absolute path if it's relative
    file_path = File.expand_path(file, Dir.pwd)
    options[:workflow_files] << file_path
  end

  opts.on("-a", "--action ACTION", "Target specific action(s) to update (can be used multiple times, e.g. 'actions/checkout')") do |action|
    options[:target_actions] ||= []
    options[:target_actions] << action
  end

  opts.on("-m", "--migrate", "Convert tag-based versions to hash-based versions") do
    options[:migrate] = true
  end

  opts.on("-n", "--dry-run", "Show what would be done without making changes") do
    options[:dry_run] = true
  end

  opts.on("-v", "--verbose", "Show more detailed output") do
    options[:verbose] = true
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

updater = GitHubActionsUpdater.new(options)

updater.run
